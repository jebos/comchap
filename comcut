#!/usr/bin/env bash

#LD_LIBRARY_PATH is set and will mess up ffmpeg, unset it, then re-set it when done
ldPath=${LD_LIBRARY_PATH}
unset LD_LIBRARY_PATH

exitcode=0

ffmpegPath="avconv"
comskipPath="comskip"
ffprobePath="avprobe"
jqPath="jq"

if [[ $# -lt 1 ]]; then

  exename=$(basename "$0")

  echo "Remove commercial from video file using EDL file"
  echo "     (If no EDL file is found, comskip will be used to generate one)"
  echo ""
  echo "Usage: $exename infile [outfile]"

  exit 1
fi

comskipini=$HOME/.comskip.ini

deleteedl=true
deletemeta=true
deletelog=true
deletelogo=true
deletetxt=true
lockfile=""
workdir=""
extension="ts"
onlyConcat=false

while [[ $# -gt 1 ]]
do
key="$1"
case $key in
    --extension=*)
    extension="${key#*=}"
    shift
    ;;
    --keep-edl)
    deleteedl=false
    shift
    ;;
    --keep-meta)
    deletemeta=false
    shift
    ;;
    --ffmpeg=*)
    ffmpegPath="${key#*=}"
    shift
    ;;
    --comskip=*)
    comskipPath="${key#*=}"
    shift
    ;;
    --comskip-ini=*)
    comskipini="${key#*=}"
    shift
    ;;
    --lockfile=*)
    lockfile="${key#*=}"
    shift
    ;;
    --work-dir=*)
    workdir="${key#*=}"
    shift
    ;;
    --only-concat)
    onlyConcat=true
    shift
    ;;
    *)
    break
    ;;
esac

done

if [ ! -z "$lockfile" ]; then

  echo "lockfile: $lockfile"
  while [[ -f "$lockfile" ]]; do
    echo "Waiting"
    sleep 5
  done

  touch "$lockfile"
fi

if [ ! -f "$comskipini" ]; then
  echo "output_edl=1" > "$comskipini"
elif ! grep -q "output_edl=1" "$comskipini"; then
  echo "output_edl=1" >> "$comskipini"
fi

infile=$1
outfile="processed.$infile"

if [[ -z "$2" ]]; then
  outfile="processed.$infile"
else
  outfile="$2"
fi

outdir="$(dirname "$outfile")"

outextension="${outfile##*.}"
extension=$outextension
comskipoutput=""

if [[ ! -z "$workdir" ]]; then
  case "$workdir" in
    */)
      ;;
    *)
      comskipoutput="--output=$workdir"
      workdir="$workdir/"
      ;;
  esac
fi

edlfile="$workdir${infile%.*}.edl"
metafile="$workdir${infile%.*}.ffmeta"
logfile="$workdir${infile%.*}.log"
logofile="$workdir${infile%.*}.logo.txt"
txtfile="$workdir${infile%.*}.txt"


if [ ! -f "$metafile" ]; then
  onlyConcat=false
fi

if [ ! -f "$edlfile" ]; then
  $comskipPath $comskipoutput --ini="$comskipini" "$infile"
fi

start=0
i=0
hascommercials=false

concat=""

tempfiles=()
totalcutduration=0

numberOfAudioStreams=`$ffprobePath -v error -select_streams a -show_entries stream=index -of json=c=0 "$infile"  | $jqPath -r '.streams | length'`
numberOfSubtitleStreams=`$ffprobePath -v error -select_streams s -show_entries stream=index -of json=c=0 "$infile"  | $jqPath -r '.streams | length'`

audio=""

subtitle=""

for audioStream in $(seq 1 $numberOfAudioStreams)
do
  internalASNB=$(($audioStream-1))
  streamChannels=`$ffprobePath -v error -select_streams a:$internalASNB -show_entries stream=channels -of json=c=0 "$infile" | $jqPath -r '.streams[] | "\(.channels)"'`

  if [ $streamChannels -ne 0 ]; then
    audio="$audio -acodec copy -map a:$internalASNB"
  fi
done
  
if [ $numberOfSubtitleStreams -gt 0 ]; then
  subtitle="-scodec copy -map s:0"
fi

if ! $onlyConcat; then
  echo ";FFMETADATA1" > "$metafile"
else
  echo "ONLY CONCAT!"
fi

# Reads in from $edlfile, see end of loop.
while IFS=$'\t' read -r -a line
do
  end="${line[0]}"
  startnext="${line[1]}"

  if [ `echo "$end" | awk '{printf "%i", $0 * 1000}'` -gt `echo "$start" | awk '{printf "%i", $0 * 1000}'` ]; then
    ((i++))

    hascommercials=true
    if ! $onlyConcat; then
      echo [CHAPTER] >> "$metafile"
      echo TIMEBASE=1/1000 >> "$metafile"
      echo START=`echo "$start  $totalcutduration" | awk  '{printf "%i", ($1 - $2) * 1000}'` >> "$metafile"
      echo END=`echo "$end $totalcutduration" | awk  '{printf "%i", ($1 - $2) * 1000}'` >> "$metafile"
      echo "title=Chapter $i" >> "$metafile"
    fi
    chapterfile="${infile%.*}.part-$i.$extension"

    if [[ ! -z "$workdir" ]]; then
      chapterfile=`basename "$chapterfile"`
      chapterfile="$workdir$chapterfile"
    fi

    tempfiles+=("$chapterfile")
    #concat="$concat|$chapterfile"
    if [ "$extension" == "mkv" ]; then
       concat="$concat + $chapterfile"
    else
       concat="$concat|$chapterfile"
    fi

    duration=`echo "$end" "$start" | awk  '{printf "%f", $1 - $2}'`
    if ! $onlyConcat; then
      echo "$ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -analyzeduration 50000000 -probesize 50000000 -i \"$infile\" -ss "$start" -t \"$duration\" -vcodec copy -map v:0  $audio $szbtitle -y \"$chapterfile\""
      $ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -analyzeduration 50000000 -probesize 50000000 -i "$infile" -ss "$start" -t "$duration"  -vcodec copy -map v:0 $audio $subtitle  -y "$chapterfile"
    fi
    totalcutduration=`echo "$totalcutduration" "$startnext" "$end" | awk  '{print $1 + $2 - $3}'`

  fi

  start=$startnext
done < "$edlfile"

echo "$hascommercials"

if $hascommercials ; then

  if ! $onlyConcat; then
    #dont forget to add the final part from last commercial to end of file
    end=`$ffmpegPath -hide_banner -nostdin -i "$infile" 2>&1 | grep Duration | awk '{print $2}' | tr -d , | awk -F: '{ printf "%f", ($1*3600)+($2*60)+$3 }'`
  fi
  if [ `echo "$end" | awk '{printf "%i", $0 * 1000}'` -gt `echo "$start" | awk '{printf "%i", $0 * 1000}'` ]; then

    ((i++))
    if ! $onlyConcat; then
      echo [CHAPTER] >> "$metafile"
      echo TIMEBASE=1/1000 >> "$metafile"
      echo START=`echo "$start  $totalcutduration" | awk  '{printf "%i", ($1 - $2) * 1000}'` >> "$metafile"
      echo END=`echo "$end $totalcutduration" | awk  '{printf "%i", ($1 - $2) * 1000}'` >> "$metafile"
      echo "title=Chapter $i" >> "$metafile"
    fi
    chapterfile="${infile%.*}.part-$i.$extension"

    if [[ ! -z "$workdir" ]]; then
      chapterfile=`basename "$chapterfile"`
      chapterfile="$chapterfile"
    fi

    tempfiles+=("$chapterfile")
    if [ "$extension" == "mkv" ]; then
       concat="$concat + $chapterfile"
    else
       concat="$concat|$chapterfile"
    fi

    duration=`echo "$end" "$start" | awk  '{printf "%f", $1 - $2}'`
    if ! $onlyConcat; then
      $ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -i "$infile" -ss "$start" -t "$duration"  -vcodec copy -map v:0 $audio $subtitle -y "$chapterfile"
    fi
  fi
  echo "$ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -i \"concat:${concat:1}\" -i "$metafile" -map 1? -vcodec copy -map v:0 $audio $subtitle -y $outfile" 
  if [ "$extension" == "mkv" ]; then
    echo "mkvmerge -o \"$outfile\" ${concat:3}"
    #TODO: this seems to mix up things... needs more testing
    mkvmerge -o "$outfile" ${concat:3}
  else
    echo "$ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -i \"concat:${concat:1}\" -i "$metafile" -map 1?  -vcodec copy -map v:0 $audio $subtitle -y $outfile"
    $ffmpegPath -fix_sub_duration -ignore_unknown -hide_banner -loglevel error -nostdin -i "concat:${concat:1}" -i "$metafile" -map_metadata 1 -vcodec copy -map v:0 $audio $subtitle -y "$outfile"
  fi
  #./transcodeToMp4.sh "$outfile"
fi

for i in "${tempfiles[@]}"
do
  if $deletemeta ; then
    rm "$i"
  fi
done

if $deleteedl ; then
  if [ -f "$edlfile" ] ; then
    rm "$edlfile";
  fi
fi

if $deletemeta ; then
  if [ -f "$metafile" ]; then
    rm "$metafile";
  fi
fi

if $deletelog ; then
  if [ -f "$logfile" ]; then
    rm "$logfile";
  fi
fi

if $deletelogo ; then
  if [ -f "$logofile" ]; then
    rm "$logofile";
  fi
fi

if $deletetxt ; then
  if [ -f "$txtfile" ]; then
    rm "$txtfile";
  fi
fi

if [ ! -z $ldPath ] ; then
  #re-set LD_LIBRARY_PATH
  export LD_LIBRARY_PATH="$ldPath"
fi

if [ ! -z "$lockfile" ]; then
  rm "$lockfile"
fi
